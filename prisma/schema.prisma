datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    Directory Directory[]
    File      File[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Directory {
    id   String @id @default(cuid())
    name String

    parentDirectory   Directory? @relation("childrenDirectories", fields: [parentDirectoryId], references: [id], onDelete: Cascade)
    parentDirectoryId String?

    childrenDirectories Directory[] @relation("childrenDirectories")
    childrenFiles       File[]      @relation("childrenFiles")

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model File {
    id String @id @default(cuid())

    name     String
    mimeType String
    chunks   FileChunk[]

    parentDirectory   Directory? @relation("childrenFiles", fields: [parentDirectoryId], references: [id], onDelete: Cascade)
    parentDirectoryId String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FileChunk {
    id String @id @default(cuid())

    size  Int
    index Int

    file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
    fileId String

    createdAt DateTime @default(now())
}
